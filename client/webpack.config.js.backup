var webpack = require('webpack');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var nodeExternals = require('webpack-node-externals');

var isProduction = process.env.NODE_ENV === 'production';
var productionPluginDefine = isProduction ? [
    new webpack.DefinePlugin({'process.env': {'NODE_ENV': JSON.stringify('production')}})
] : [];
var clientLoaders = isProduction ? productionPluginDefine.concat([
    new webpack.optimize.DedupePlugin(),
    new webpack.optimize.OccurrenceOrderPlugin(),
    new webpack.optimize.UglifyJsPlugin({ compress: { warnings: false }, sourceMap: false })
]) : [];

var commonLoaders = [
    {
        test: /\.json$/,
        loader: 'json-loader'
    }
];

module.exports = [
/*{
        entry: './src/server.js',
        context: __dirname,
        output: {
            path: __dirname,
            filename: './dist/server.js',
            libraryTarget: 'commonjs2',
        },
        target: 'node',
        node: {
            console: false,
            global: false,
            process: false,
            Buffer: false,
            __filename: false,
            __dirname: false
        },
        externals: nodeExternals(),
        module: {
            loaders: [
                {
                    test: /\.js$/,
                    exclude: /node_modules/,
                    loader: 'babel-loader',
                    query: {
                        presets: ['env', 'react']
                    }
                },
                {
                    test: /\.css$/,
                    loader: "style-loader"
                },
                {
                    test: /\.css$/,
                    loader: "css-loader",
                    query: {
                        modules: true,
                        localIdentName: '[name]__[local]___[hash:base64:5]'
                    }
                },
                {
                    test: /\.less$/,
                    loader: "style-loader!css-loader!less-loader"
                },
                {
                    test: /\.(jpe?g|png|gif|svg|mp3)$/,
                    loader: 'file-loader'
                },
                {
                    test: /\.(woff|woff2|eot|ttf|svg)$/, // url-loader needed to import css files,
                    loader: 'url-loader?limit=100000'    // excluding png from test to load png via file-loader
                }
            ].concat(commonLoaders)
        },
        plugins: [
            new CopyWebpackPlugin([
                {from: './js/blockly-interpreter/acorn.js', to: './dist/lib/blockly-interpreter/acorn.js'},
                {from: './js/blockly-interpreter/interpreter.js', to: './dist/lib/blockly-interpreter/interpreter.js'},
            ]),
            //productionPluginDefine,
            new webpack.ProvidePlugin({ // auto load specified module wherever specified identifiers are encountered
                $: 'jquery',
                jQuery: 'jquery',
                jquery: 'jquery'
            })
        ],
        resolve: {
            alias: {
                jquery: "jquery/src/jquery" // use unminified over dist
            }
        }
    },*/
    {
        entry: './src/server.js',
        output: {
            path: './dist',
            filename: 'server.js',
            libraryTarget: 'commonjs2',
            publicPath: '/'
        },
        target: 'node',
        node: {
            console: false,
            global: false,
            process: false,
            Buffer: false,
            __filename: false,
            __dirname: false
        },
        externals: nodeExternals(),
        plugins: productionPluginDefine,
        module: {
            loaders: [
                {
                    test: /\.js$/,
                    loader: 'babel'
                }
            ].concat(commonLoaders)
        }
    },
    {
        context: __dirname,
        entry: './src/main.js',
        output: {
            path: __dirname,
            filename: './dist/bundle.js'
        },
        watch: true,
        module: {
            loaders: [
                {
                    test: /\.js$/,
                    exclude: /node_modules/,
                    loader: 'babel-loader',
                    query: {
                        presets: ['env', 'react']
                    }
                },
                {
                    test: /\.css$/,
                    loader: "style-loader!css-loader"
                },
                {
                    test: /\.less$/,
                    loader: "style-loader!css-loader!less-loader"
                },
                {
                    test: /\.(jpe?g|png|gif|svg|mp3)$/,
                    loader: 'file-loader'
                },
                {
                    test: /\.(woff|woff2|eot|ttf|svg)$/, // url-loader needed to import css files,
                    loader: 'url-loader?limit=100000'    // excluding png from test to load png via file-loader
                }
            ],
        },
        plugins: [
            new webpack.ProvidePlugin({ // auto load specified module wherever specified identifiers are encountered
                $: 'jquery',
                jQuery: 'jquery',
                jquery: 'jquery'
            })
            /*new webpack.ProvidePlugin({
             Blockly: 'Blockly'
             })*/
        ],
        resolve: {
            alias: {
                jquery: "jquery/src/jquery" // use unminified over dist
            }
        },
        devtool: '#inline-source-map'
    }
];